variables:
  # Runner will discover the UID and GID of the user configured in the image used by the build container
  # and will change the ownership of the working directory and files by running the chmod command in the
  # predefined container (after updating sources, restoring cache and downloading artifacts).
  FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: "true"

default:
  tags:
    - docker
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

build-docker-image:
  stage: .pre
  services:
    - name: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:dind
      variables:
        DOCKER_TLS_CERTDIR: ""
      # hostname of dind container inside the private network has to be "docker"
      alias: docker
  image: $CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:latest
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - echo "$CI_DEPENDENCY_PROXY_PASSWORD" | docker login $CI_DEPENDENCY_PROXY_SERVER -u $CI_DEPENDENCY_PROXY_USER --password-stdin

    - docker build
      --pull
      --push
      --cache-from $CI_REGISTRY_IMAGE:buildcache
      --build-arg BUILDKIT_INLINE_CACHE=1
      --build-arg CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX=$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/
      --build-arg REPO=amd64
      --build-arg UBUNTU_RELEASE=jammy
      --tag $CI_REGISTRY_IMAGE:buildcache
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      -f ci/Dockerfile .

Build-Release:
  stage: build
  script:
    - env
    - ci/build.sh --clean Release
  artifacts:
    paths:
      - build/Release

Build-Analyzer:
  stage: build
  script:
    - ci/build.sh --clean Analyzer
  artifacts:
    paths:
      - build/Analyzer

Build-Asan:
  stage: build
  script:
    - ci/build.sh --clean Asan
  artifacts:
    paths:
      - build/Asan

Build-Ubsan:
  stage: build
  script:
    - ci/build.sh --clean Ubsan
  artifacts:
    paths:
      - build/Ubsan

Build-Coverage:
  stage: build
  script:
    - env
    - ci/build.sh Coverage
  artifacts:
    paths:
      - build/Coverage

Lint:
  stage: test
  needs:
    - Build-Release
  script:
    - ci/clang-tidy.sh Release
    - ci/format-code.sh --check
    - ci/lint-commits.sh origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME:-$CI_DEFAULT_BRANCH}
  artifacts:
    paths:
      - build/Release/result

Unit-Tests-Release:
  stage: test
  needs:
  - Build-Release
  script:
    - ci/run-utests.sh Release
  artifacts:
    paths:
      - build/Release/result

Unit-Tests-Asan:
  stage: test
  needs:
    - Build-Asan
  script:
    - ci/run-utests.sh Asan
  artifacts:
    paths:
      - build/Asan/result

Unit-Tests-Ubsan:
  stage: test
  needs:
    - Build-Ubsan
  script:
    - ci/run-utests.sh Ubsan
  artifacts:
    paths:
      - build/Ubsan/result

Unit-Tests-Coverage:
  stage: test
  needs:
    - Build-Coverage
  script:
    - ci/run-utests.sh Coverage
  artifacts:
    when: always
    paths:
      - build/Coverage/result
      - build/Coverage/**/*.gcda
      - build/Coverage/**/*.gcno

code-coverage:
  stage: test
  needs:
    - Build-Coverage
    - Unit-Tests-Coverage
  script:
      - ci/create_coverage.sh gcov
  artifacts:
    when: always
    paths:
      - build/Coverage/result/coverage
